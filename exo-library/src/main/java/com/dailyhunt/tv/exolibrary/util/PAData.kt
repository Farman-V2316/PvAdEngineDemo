/*
 * Copyright (c) 2019 Newshunt. All rights reserved.
 */

package com.dailyhunt.tv.exolibrary.util

import android.net.Uri
import androidx.room.ColumnInfo
import androidx.room.Database
import androidx.room.Entity
import androidx.room.PrimaryKey
import androidx.room.Room
import androidx.room.RoomDatabase
import com.newshunt.dataentity.common.helper.common.CommonUtils

/**
 * Database to capture player events. These are analyzed and reported through analytics. So,
 * it used as in-memory database only .
 *
 * @author satosh.dhanyamraju
 */
@Database(entities = [PlayerState::class, BitrateEntry::class, LoadEntry::class, FormatChange::class],
version = 1)
abstract class PADB : RoomDatabase() {
  abstract fun dao(): PADao
}

/**
 * Room entity for player states
 * @author satosh.dhanyamraju
 */
@Entity(tableName = "player_states", primaryKeys = ["uid", "et", "st"])
data class PlayerState(
    @ColumnInfo(name = "uid") val uniqueId: Long, // one per listener instance
    @ColumnInfo(name = "et") val eventTime: Long,
    @ColumnInfo(name = "st") val state: Int
)

/**
 * Room entity to store estimated bandwidth changes
 * @author satosh.dhanyamraju
 */
@Entity(tableName = "bitrate_entries")
data class BitrateEntry(
    @ColumnInfo(name = "uid") val uniqueId: Long,
    @PrimaryKey @ColumnInfo(name = "et") val eventTime: Long,
    @ColumnInfo(name = "bt") val bitrate: Long
)

/**
 * Room entity to track loading media
 * @author satosh.dhanyamraju
 */
@Entity(tableName = "load_entries", primaryKeys = ["uid", "et_start", "uri"])
data class LoadEntry(
    @ColumnInfo(name = "uid") val uniqueId: Long,
    @ColumnInfo(name = "uri") val uri: String,
    @ColumnInfo(name = "et_start") val timeStart: Long,
    @ColumnInfo(name = "et_finish") val timeFinish: Long? = null,
    @ColumnInfo(name = "fin_type") val finishType: Long? = null// 1 - completed, 2 - error, 3 - cancel
)

/**
 * Room entity to track downstreamFormatChanges
 * @author satosh.dhanyamraju
 */
@Entity(tableName = "format_changes", primaryKeys = ["uid", "et"])
data class FormatChange(
    @ColumnInfo(name = "uid") val uniqueId: Long,
    @ColumnInfo(name = "et") val et: Long,
    @ColumnInfo(name = "track_id") val trackId: Int,
    @ColumnInfo(name = "bitrate") val bitrate: Int,
    @ColumnInfo(name = "mime_type") val mimeType: String? = null
)

/**
 * Captures a chunk of time [dur], for which player esitmate a bitrate [bt]
 * List of [BwDuration] represent the timeline of bitrate changes.
 *
 * @author satosh.dhanyamraju
 */
data class BwDuration(val bt: Long,
                      val dur: Long) {
  fun analyticsStr() = "$bt=$dur"
}

/**
 * Represents aggregate values of load events for a particular media.
 * @author satosh.dhanyamraju
 */
data class LoadEntryAgg(
    var uri: String = "",
    var totalTime: Long = 0L,
    var ends: Int = 0,
    var cancells: Int = 0,
    var errors: Int = 0,
    var incompletes: Int = 0,
    var attempts: Int = 0) {

  fun analyticsStr(): String {
    val path = runCatching { Uri.parse(uri).lastPathSegment?:""}.getOrDefault("")

    val builder = StringBuilder("$path(")
    if (totalTime != 0L) builder.append("totalTime=$totalTime ")
    if (attempts != 0) builder.append("attempts=$attempts ")
    if (ends != 0) builder.append("ends=$ends ")
    if (cancells != 0) builder.append("cancells=$cancells ")
    if (errors != 0) builder.append("errors=$errors ")
    if (incompletes != 0) builder.append("incompletes=$incompletes ")
    builder.append(")")
    return builder.toString()
  }
}

/**
 * POJO generated by[PAListener]; to be used for analytics.
 * @author satosh.dhanyamraju
 */
data class PA(
    val id: Any,
    val totalBufferTime: Long,
    val totalPlaybackTime: Long,
    val allStates: List<Int>,
    val bitratesAtStateChanges: List<Long>,
    val bitrateSummary: List<BwDuration>,
    val loadSummary: List<LoadEntryAgg>,
    val timeTakenForFirstFormatChange: Long,
    val formatChangeCount: Int) {


  fun formattedStr() = """
       id = $id
       totalbuff = $totalBufferTime
       totalPlayback = $totalPlaybackTime
       allStates = $allStates
       bwAtStChanges = $bitratesAtStateChanges
       bwSummary = ${bitrateSummaryForEvent()}
       loadSummary = ${loadSummaryForEvent() }
       firstFormatChangeDelay = ${timeTakenForFirstFormatChange}
       formatChangeCount = ${formatChangeCount}
     """.trimIndent()

  fun bitrateSummaryForEvent() = bitrateSummary.map { it.analyticsStr() }
  fun loadSummaryForEvent()  = loadSummary.map { it.analyticsStr()}
}


/**
 * singleton to be used across the app.
 */
internal val PA_DB = Room.inMemoryDatabaseBuilder<PADB>(CommonUtils.getApplication(),
    com.dailyhunt.tv.exolibrary.util.PADB::class.java).build()